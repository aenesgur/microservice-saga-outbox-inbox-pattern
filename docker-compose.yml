version: '3'
services:

  ### Services ###
  order-service:
    container_name: order-service
    image: 'aenesgur/dp-mc/order-service-image'
    build:
      context: ./order/
    ports:
      - "4041:4041"
    environment:
      - server.port=4041
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-orderservice:5431/order-service
      - SPRING_DATASOURCE_USERNAME=orderservice-user
      - SPRING_DATASOURCE_PASSWORD=123456
      - spring.redis.host=redis-master
      - spring.redis.port=6379
      - spring.kafka.bootstrap-servers=kafka:29092

    depends_on:
      - postgres-orderservice
      - kafka
      - redis-master

  payment-service:
    container_name: payment-service
    image: 'aenesgur/dp-mc/payment-service-image'
    build:
      context: ./payment/
    ports:
      - "4042:4042"
    environment:
      - server.port=4042
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-paymentservice:5433/payment-service
      - SPRING_DATASOURCE_USERNAME=paymentservice-user
      - SPRING_DATASOURCE_PASSWORD=123456
      - spring.redis.host=redis-master
      - spring.redis.port=6379
      - kafka.bootstrap-servers=kafka:29092

    depends_on:
      - postgres-paymentservice
      - kafka
      - redis-master

  ### Dependencies ###
  postgres-orderservice:
    container_name: postgres-orderservice
    image: postgres
    environment:
      POSTGRES_DB: order-service
      POSTGRES_USER: orderservice-user
      POSTGRES_PASSWORD: 123456
      PGDATA: /data/postgres
    volumes:
      - ./postgres-orderservice:/data/postgres
    expose:
      - "5431"
    ports:
      - "5431:5431"
    command: -p 5431
    restart: unless-stopped

  postgres-paymentservice:
    container_name: postgres-paymentservice
    image: postgres
    environment:
      POSTGRES_DB: payment-service
      POSTGRES_USER: paymentservice-user
      POSTGRES_PASSWORD: 123456
      PGDATA: /data/postgres
    volumes:
      - ./postgres-paymentservice:/data/postgres
    expose:
      - "5433"
    ports:
      - "5433:5433"
    command: -p 5433
    restart: unless-stopped

  zookeeper:
    image: zookeeper:3.7.0
    container_name: zookeeper
    restart: "no"
    ports:
      - "2181:2181"

  kafka:
    image: obsidiandynamics/kafka
    container_name: kafka
    restart: "no"
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: DOCKER_INTERNAL://:29092,DOCKER_EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka:29092,DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - "kafka"

  redis-master:
    container_name: redis-master
    image: 'bitnami/redis:latest'
    environment:
      - REDIS_AOF_ENABLED=yes
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6379:6379"
    volumes:
      - ./redis/data:/bitnami/redis/data